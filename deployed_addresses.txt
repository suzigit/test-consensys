This doc describes where the Tradeable Wallet contracts live on the test net:

* Contract Creator: 0xe220145aeb36683b71280dc3e26cf4d61d8ff6b1
It was created in this transaction: https://rinkeby.etherscan.io/tx/0x1ac1b7ca9606ab69cfd507ccde690a0ba0aab06e91e541994973502f3f989fe7
Owner: 0x3190aeb50f4a42d62526b144708ad4919829d236


* TokenERC20_Mock: 0xf0df2a9712305a5e53244eba2a785e12f1cef8b3
It was created in this transaction: https://rinkeby.etherscan.io/tx/0x0c9f194c4aeaf2f28c6ccdbd47703c4c855c018310a795ed767ea46182fbf170
This symbol is MOCK.
Owner: 0x3190aeb50f4a42d62526b144708ad4919829d236
This Mock is used during the test of withdraw functionality.
For this test, you can also use the address of any ERC20 token that you know at testnet.

??????????????????
It was tracked by EtherScan as a valid token: https://rinkeby.etherscan.io/token/0xc3994c5cbddf7ce38b8a2ec2830335fa8f3eea6a
I also veriied its source code, so you can read/write using EtherScan by using Read Contract/Write Contract functionalities.
At the time of this writing, the owner has 975 tokens and 0xC3ee4B592FD3EBD53ba757Ae2DAF484b20D75aE4 has 25 tokens
????????????



* Tradeable Contract
Obs: In general the Tradeable Contracts (representing the Tradeable Wallets) are created dinamically, by the use of this application.
Then, it does not need to be deployed a priori on test net
However, it was necessary to deploy it on localhost in order to make the unit tests


-----------------

Also deployed these contracts:
These were created only to be used on illustration of the use of a lib

* SafeMath: 0x25213e8abe3405f42d5876bbb29ef95df107c09e
It was created in this transaction: https://rinkeby.etherscan.io/tx/0xc40ff03e7a4c1875ade3169d7fe761c54a389d985daf7975ece47cd9a65bbe6e
Used only to illustrate the use of a lib

* LibraryDemo: 0x22438bfcd21c5c76356d56fc2f3a4b827431a611
It was created in this transaction: https://rinkeby.etherscan.io/tx/0x73b25b0f2a406030aba6551329a3caf6958308abf38878b6257504119d054362
